using Gtk 4.0;
using BarBar 1.0;
using Statusnotifier 0.1;
// This example shows every widget we have
BarBar.Bar {
  bar-pos: bot;
  // since barbar (the program) links to systray, we can do this.
  Gtk.ActionBar {
    [start]
    Statusnotifier.Systray {
      iconsize: 22;
      box-margins: 2;
      spacing: 2;
    }

    // if we want an item that reveals it self when hovering, we can simple do this.

    [start]
    Gtk.Box {
      Gtk.EventControllerMotion hover {}

      Gtk.Label {
        label: "rev";
      }

      Gtk.Revealer {
        transition-duration: 350;
        transition-type: slide_right;
        reveal-child: bind hover.contains-pointer;

        Gtk.Label {
          label: "ealer";
        }
      }
    }

    [end]
    Gtk.Label {
      label: bind clock.time;
    }

    [end]
    Gtk.ScaleButton volume {
      tooltip-markup: bind $g_barbar_strdup_printf("%2.1f", plumb.percent) as <string>;
      // tooltip-markup: bind $g_barbar_strdup_printf("%0.f°C<span color=\"#bd111f\"> </span>", temperature.temperature) as <string>;
      // Gtk.Label {
      // label: bind $barbar_strdup_printf("%0.f°C<span color=\"#bd111f\"> </span>", temperature.temperature) as <string>;
      // use-markup: true;
      // }
      adjustment: Adjustment {
        lower: 0.0;
        upper: 1.0;
        page-increment: 0.1;
        step-increment: 0.1;
        value: bind plumb.percent bidirectional;
      };
    }

    [end]
    Gtk.Label {
      label: bind key.device.num-lock-state;
    }

    // We are not limited to labels, we can do more fancy stuff too.

    [end]
    Gtk.LevelBar {
      value: bind mem.percent;
      orientation: vertical;
      inverted: true;
    }

    [end]
    Gtk.LevelBar {
      value: bind cpu.percent;
      orientation: vertical;
      inverted: true;
    }

    // But what if we want if we want to do something with the value before we print it to the label?
    // We use an experession for this! Here we use the printf function.
    // If you need more powerful things, you can define your own functions in a programming language.
    // See manual for this
    // [end]
    // Gtk.Label {
    // label: bind $barbar_strdup_printf("%0.f°C<span color=\"#bd111f\"> </span>", temperature.temperature) as <string>;
    // use-markup: true;
    // }
    // But wait there is more! We have a custom label widget. It's a bit different.
    // The difference is that it takes a signal from a sensor and then uses a template
    // to display it. It uses template-glib and have access to all properties and can 
    // loops, if's and much more.

    [end]
    BarBar.Label network_label {
      sensor: network;
      templ: "{{BarBarNetwork.interface}}: {{BarBarNetwork.down_speed}}b ⬇️ | {{BarBarNetwork.up_speed}}b ⬆️ ";

      [child]
      Gtk.Label {}
    }

    [end]
    BarBar.Label temp {
      sensor: temperature;
      // Here we don't care about floats, so we cast it to a i32.
      templ: "{{i32(BarBarTemperature.temperature)}} ";

      [child]
      Gtk.Label {}
    }

    [end]
    Gtk.LevelBar {
      value: bind battery.percent;
      orientation: vertical;
      inverted: true;
    }

    // Some sensors needs to be tightly connected to a widget

    [end]
    BarBar.SensorWidget {
      sensor: BarBar.Inhibitor inhibit {};

      child: Gtk.ToggleButton {
        label: "inhibitor";
        active: bind inhibit.enabled bidirectional;
      };
    }

    [end]
    Gtk.ScaleButton backbutton {
      adjustment: Adjustment {
        lower: 0.0;
        upper: 1.0;
        page-increment: 0.1;
        step-increment: 0.1;
        value: bind backlight.percent bidirectional;
      };
    }

    [end]
    BarBar.Graph {
      value: bind cpu.percent;
    }

    [end]
    BarBar.Rotary {
      value: bind cpu.percent;
    }

    [end]
    Gtk.Label {
      label: bind pomodoro.current;
    }

    // [end]
    // BarBar.Label {
    //   sensor: mpris;
    //   templ: "{{BarBarMprisPlayer.artist}} - {{BarBarMprisPlayer.playback_status}}";
    // 
    //   [child]
    //   Gtk.Label {}
    // }
    //

    [end]
    Gtk.Box {
      BarBar.EventSwitcher switcher {
        index: bind mpris.playback-status bidirectional;

        Gtk.GestureClick sleft {
          button: 1; // 1 is primary, 3 is secondary, 2 is middle etc.
          released => $g_barbar_event_switcher_next(switcher) swapped;
        }

        Gtk.GestureClick sright {
          button: 3; // 1 is primary, 3 is secondary, 2 is middle etc.
          released => $g_barbar_event_switcher_previous(switcher) swapped;
        }

        Gtk.Stack stack {
          Gtk.Image {
            sensitive: bind mpris.can-pause;
            icon-name: "media-playback-start-symbolic";
          }

          Gtk.Image {
            sensitive: bind mpris.can-play;
            icon-name: "media-playback-pause-symbolic";
          }
        }
      }

      BarBar.EventSwitcher loop {
        index: bind mpris.loop-status bidirectional;

        Gtk.GestureClick left {
          button: 1; // 1 is primary, 3 is secondary, 2 is middle etc.
          released => $g_barbar_event_switcher_next(loop) swapped;
        }

        Gtk.GestureClick right {
          button: 3; // 1 is primary, 3 is secondary, 2 is middle etc.
          released => $g_barbar_event_switcher_previous(loop) swapped;
        }

        Gtk.Stack {
          Gtk.Image {
            icon-name: "media-playlist-repeat";
            // we do this create the same thing but to just fade it out
            css-classes: [
              "disabled"
            ];
          }

          Gtk.Image {
            icon-name: "media-playlist-repeat";
          }

          Gtk.Image {
            icon-name: "media-playlist-repeat-song";
          }
        }
      }

      Gtk.Button {
        icon-name: "media-playback-stop-symbolic";
        sensitive: bind mpris.can-play;
        clicked => $g_barbar_mpris_player_stop(mpris) swapped;
      }

      Gtk.Button {
        icon-name: "media-skip-forward-symbolic";
        sensitive: bind mpris.can-go-next;
        clicked => $g_barbar_mpris_player_next(mpris) swapped;
      }

      Gtk.Button {
        icon-name: "media-skip-backward-symbolic";
        sensitive: bind mpris.can-go-prev;
        clicked => $g_barbar_mpris_player_previous(mpris) swapped;
      }

      // 
      // BarBar.Label {
      //   sensor: mpris;
      //   templ: "{{BarBarMprisPlayer.artist}} - {{BarBarMprisPlayer.title}} | {{BarBarMprisPlayer.position}} / {{BarBarMprisPlayer.length}}";
      // 
      //   [child]
      //   Gtk.Label {}
      // }
    }
  }
}

BarBar.Clock clock {
  interval: 1000;
  format: "%H:%M:%S";
}

BarBar.Mem mem {}

BarBar.Cpu cpu {
  interval: 1000;
}

BarBar.Network network {
  interface: "wlan0";
}

BarBar.Backlight backlight {}

BarBar.Battery battery {}

BarBar.Wireplumber plumb {}

BarBar.Keyboard key {}

BarBar.Temperature temperature {}

BarBar.Pomodoro pomodoro {
  length: 10;
  running: true;
}

BarBar.PowerProfile profile {}

BarBar.SystemdUnits units {
  bus-type: session;
}

BarBar.RiverMode mode {}

BarBar.Weather weater {}

BarBar.MprisPlayer mpris {
  player-instance: "mpd";
}
