using Gtk 4.0;
using BarBar 1.0;

BarBar.Background background {
  top-margin: 0;
  bottom-margin: 0;
  right-margin: 0;
  left-margin: 950;

  Gtk.Box {
    hexpand: true;
    orientation: vertical;

    [child]
    Gtk.Label {
      label: bind time.time;
      justify: center;
      name: "time";
    }

    [child]
    Gtk.Label {
      label: bind date.time;
      justify: center;
      name: "date";
    }

    Gtk.Box {
      orientation: horizontal;

      [child]
      Gtk.Label {
        xalign: 0;
        label: "System";
        name: "header";
      }

      [child]
      Gtk.Separator {
        hexpand: true;
        // orientation: horizontal;
      }
    }

    Gtk.Grid {
      hexpand: true;

      [child]
      Gtk.Label {
        label: "Hostname:";
        xalign: 0;

        layout {
          column: 0;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        hexpand: true;
        label: bind hostname.value;
        xalign: 1;

        layout {
          column: 1;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        label: "OS:";
        xalign: 0;

        layout {
          column: 0;
          row: 1;
        }
      }

      [child]
      Gtk.Label {
        label: "Arch linux";
        xalign: 1;

        layout {
          column: 1;
          row: 1;
        }
      }

      [child]
      Gtk.Label {
        label: "Kernel:";
        xalign: 0;

        layout {
          column: 0;
          row: 2;
        }
      }

      [child]
      Gtk.Label {
        label: bind kernel.value;
        xalign: 1;

        layout {
          column: 1;
          row: 2;
        }
      }

      [child]
      Gtk.Label {
        label: "Uptime:";
        xalign: 0;

        layout {
          column: 0;
          row: 3;
        }
      }

      [child]
      Gtk.Label {
        // label: "1h 37m 56s";
        label: bind uptime.time;
        xalign: 1;

        layout {
          column: 1;
          row: 3;
        }
      }

      [child]
      Gtk.Label {
        label: "Processes:";
        xalign: 0;

        layout {
          column: 0;
          row: 4;
        }
      }

      [child]
      Gtk.Label {
        label: "352";
        xalign: 1;

        layout {
          column: 1;
          row: 4;
        }
      }
    }

    Gtk.Box {
      orientation: horizontal;

      [child]
      Gtk.Label {
        xalign: 0;
        label: "Cpu";
        name: "header";
      }

      [child]
      Gtk.Separator {
        hexpand: true;
        // orientation: horizontal;
      }
    }

    Gtk.Grid {
      hexpand: true;

      [child]
      Gtk.Label {
        label: "Cpu:";
        xalign: 0;

        layout {
          column: 0;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        hexpand: true;
        halign: end;
        label: "1.7Ghz";
        xalign: 1;

        layout {
          column: 1;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        label: "Cpu Temperature";
        xalign: 0;

        layout {
          column: 0;
          row: 1;
        }
      }

      [child]
      Gtk.Label {
        label: bind $g_barbar_printf("%.1fC", temp.temperature) as <string>;
        xalign: 1;

        layout {
          column: 1;
          row: 1;
        }
      }

      [child]
      Gtk.Label {
        label: "Cpu Usage";
        xalign: 0;

        layout {
          column: 0;
          row: 2;
        }
      }

      [child]
      Gtk.Label {
        label: bind $g_barbar_print_percent(cpu.percent, 2, 1) as <string>;
        xalign: 1;

        layout {
          column: 1;
          row: 2;
        }
      }
    }

    [child]
    BarBar.IntervalGraph {
      value: bind cpu.percent;
      interval: 3000;

      graph: BarBar.BarGraph {
        orientation: horizontal;

        [bar]
        Gtk.LevelBar {
          orientation: vertical;
          vexpand: true;
        }

        [bar]
        Gtk.LevelBar {
          orientation: vertical;
          vexpand: true;
        }

        [bar]
        Gtk.LevelBar {
          orientation: vertical;
          vexpand: true;
        }
      };
    }

    //    [child]
    //    BarBar.CpuProcesses {}
    // 
    Gtk.Box {
      orientation: horizontal;

      [child]
      Gtk.Label {
        xalign: 0;
        label: "Memory";
        name: "header";
      }

      [child]
      Gtk.Separator {
        hexpand: true;
        // orientation: horizontal;
      }
    }

    Gtk.Grid {
      hexpand: true;

      [child]
      Gtk.Label {
        label: "Swap Usage:";
        xalign: 0;

        layout {
          column: 0;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        label: bind $g_barbar_print_bytes("%.2gG / %.0gG", swap.used, swap.total) as <string>;
        hexpand: true;
        xalign: 1;

        layout {
          column: 1;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        label: "Memory Usage:";
        xalign: 0;

        layout {
          column: 0;
          row: 1;
        }
      }

      [child]
      Gtk.Label {
        // label: bind $g_barbar_printf("%lu / %lu", mem.used, mem.total) as <string>;
        label: bind $g_barbar_print_bytes("%.2gG / %.0gG", mem.used, mem.total) as <string>;
        hexpand: true;
        xalign: 1;

        layout {
          column: 1;
          row: 1;
        }
      }
    }

    [child]
    BarBar.IntervalGraph {
      value: bind mem.percent;

      graph: BarBar.LineGraph {
        min-height: 40;
        fill: false;
      };
    }

    Gtk.Box {
      orientation: horizontal;

      [child]
      Gtk.Label {
        xalign: 0;
        label: "Disk";
        name: "header";
      }

      [child]
      Gtk.Separator {
        hexpand: true;
      }
    }

    Gtk.Grid {
      hexpand: true;

      [child]
      Gtk.Label {
        label: "Disk Usage:";
        xalign: 0;

        layout {
          column: 0;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        hexpand: true;
        label: bind $g_barbar_print_percent(fs.percent, 2, 1) as <string>;
        xalign: 1;

        layout {
          column: 1;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        label: "IO Read / Write:";
        xalign: 0;

        layout {
          column: 0;
          row: 1;
        }
      }

      [child]
      Gtk.Label {
        label: bind $g_barbar_print_bytes("%.2a / %.2a", disk.read, disk.write) as <string>;
        hexpand: true;
        xalign: 1;

        layout {
          column: 1;
          row: 1;
        }
      }
    }

    [child]
    BarBar.IntervalGraph {
      // you should set the max-value to the max speed of your disk
      // use hdparm to get this info
      value: bind disk.read-speed;

      graph: BarBar.LineGraph {
        min-height: 40;
      };
    }

    [child]
    BarBar.IntervalGraph {
      // you should set the max-value to the max speed of your disk
      // use hdparm to get this info
      value: bind disk.write-speed;

      graph: BarBar.LineGraph {
        min-height: 40;
      };
    }

    Gtk.Box {
      orientation: horizontal;

      [child]
      Gtk.Label {
        xalign: 0;
        label: "Network";
        name: "header";
      }

      [child]
      Gtk.Separator {
        hexpand: true;
      }
    }

    Gtk.Grid {
      hexpand: true;

      [child]
      Gtk.Label {
        label: "Default Gateway:";
        xalign: 0;

        layout {
          column: 0;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        hexpand: true;
        label: bind gateway.value;
        xalign: 1;

        layout {
          column: 1;
          row: 0;
        }
      }

      [child]
      Gtk.Label {
        label: "Internal IP Address:";
        xalign: 0;

        layout {
          column: 0;
          row: 1;
        }
      }

      [child]
      Gtk.Label {
        hexpand: true;
        label: bind net.address;
        xalign: 1;

        layout {
          column: 1;
          row: 1;
        }
      }

      [child]
      Gtk.Label {
        label: "External IP Address:";
        xalign: 0;

        layout {
          column: 0;
          row: 2;
        }
      }

      [child]
      Gtk.Label {
        hexpand: true;
        label: bind external.value;
        xalign: 1;

        layout {
          column: 1;
          row: 2;
        }
      }

      [child]
      Gtk.Label {
        label: "Upload speed / Download Total:";
        xalign: 0;

        layout {
          column: 0;
          row: 3;
        }
      }

      [child]
      Gtk.Label {
        label: bind $g_barbar_print_bytes("%.2a / %.2a", net.download, net.upload) as <string>;
        hexpand: true;
        xalign: 1;

        layout {
          column: 1;
          row: 3;
        }
      }

      [child]
      Gtk.Label {
        label: "Upload speed / Download Speed:";
        xalign: 0;

        layout {
          column: 0;
          row: 4;
        }
      }

      [child]
      Gtk.Label {
        label: bind $g_barbar_print_bytes("%.2a / %.2a", net.down-speed, net.up-speed) as <string>;
        hexpand: true;
        xalign: 1;

        layout {
          column: 1;
          row: 4;
        }
      }
    }

    [child]
    BarBar.IntervalGraph {
      // you should set the max-value to the max speed of your network
      value: bind net.down-speed;

      graph: BarBar.LineGraph {
        min-height: 40;
      };
    }

    [child]
    BarBar.IntervalGraph {
      // you should set the max-value to the max speed of your network
      value: bind net.up-speed;

      graph: BarBar.LineGraph {
        min-height: 40;
      };
    }

    Gtk.Box {
      orientation: horizontal;

      [child]
      Gtk.Label {
        xalign: 0;
        label: "Procceses:";
        name: "header";
      }

      [child]
      Gtk.Separator {
        hexpand: true;
      }
    }

    // BarBar.CpuProcesses {
    //   number: 5;
    //   order: cpu;
    // }
  }
}

BarBar.Background background-left {
  top-margin: 0;
  bottom-margin: 0;
  right-margin: 1125;
  left-margin: 0;

  Gtk.Box {
    hexpand: true;
    orientation: vertical;

    BarBar.StepBar {
      value: 0.5;
      percentage: 0.25;

      bar: Gtk.LevelBar {};
    }

    BarBar.StepBar {
      value: 0.5;
      percentage: 0.5;

      bar: Gtk.LevelBar {};
    }

    BarBar.StepBar {
      value: 1.0;
      percentage: 0.75;

      bar: Gtk.LevelBar {};
    }

    BarBar.StepBar {
      value: 1.0;
      percentage: 1;

      bar: Gtk.LevelBar {};
    }

    // Gtk.Box {
    //   orientation: horizontal;
    // 
    //   [child]
    //   Gtk.Label {
    //     xalign: 0;
    //     label: "Github";
    //     name: "dark";
    //   }
    // 
    //   [child]
    //   Gtk.Separator {
    //     hexpand: true;
    //     name: "dark";
    //   }
    // }
    // 
    // [child]
    // BarBar.GithubActivity {
    //   user-name: "dagle";
    //   auth-token: "";
    // 
    //   [child]
    //   BarBar.ActivityGraph {}
    // }
    // 
    // BarBar.EventSwitcher switcher {
    //   Gtk.GestureClick left {
    //     button: 1; // 1 is primary, 3 is secondary, 2 is middle etc.
    //     released => $g_barbar_event_switcher_next(switcher) swapped;
    //   }
    // 
    //   Gtk.GestureClick right {
    //     button: 3;
    //     released => $g_barbar_event_switcher_previous(switcher) swapped;
    //   }
    // 
    //   Gtk.Stack stack {
    //     Gtk.Label {
    //       label: "apa";
    //     }
    // 
    //     Gtk.Label {
    //       label: "bepa";
    //     }
    //   }
    // }
  }
}

BarBar.Cpu cpu {
  interval: 1000;
}

BarBar.Mem mem {
  interval: 1000;
}

BarBar.Clock time {
  interval: 1000;
  format: "%H:%M";
}

BarBar.Clock date {
  // todo OMP stuff, so we can make the clock edge trigger.
  // then we could do 1000*3600*24; and just update the clock once per day.
  interval: 1000;
  format: "%B %d, %Y";
}

BarBar.Cmd hostname {
  cmd: "uname -n";
}

BarBar.Cmd kernel {
  cmd: "uname -r";
}

BarBar.Uptime uptime {
  interval: 1000;
  format: "%cy%(years )%ch%(hours )%02mm %02ss";
}

BarBar.Temperature temp {}

BarBar.Filesystem fs {
  path: "/";
}

BarBar.Swap swap {}

BarBar.Network net {
  interface: "wlan0";
  interval: 1000;
}

BarBar.Cmd external {
  cmd: "wget -q -O- https://ipecho.net/plain";
}

BarBar.Cmd gateway {
  cmd: "gateway";
}

BarBar.Disk disk {
  device: "sda";
}
