using Gtk 4.0;
using BarBar 1.0;
using Vte 3.91;

// At toplevel, you should define windows or signals
// Barbar.Bar is a window
BarBar.Bar {
  bar-pos: top;
  // we can specify a screen or the current screen is in use
  // screen-num: 1
  Gtk.ActionBar {
    // We have custom widgets for river, hyprland, dwl etc
    [start]
    BarBar.RiverTag {
    }


    [start]
    BarBar.RiverLayout {
    }

    [start]
    BarBar.RiverMode {
    }

    [center]
    BarBar.RiverView {
    }

    [end]
    BarBar.StatusWatcher {
    }

    [end]
    Gtk.Label {
      label: bind clock.time;
    }

    [end]
    Gtk.Label {
      label: bind $barbar_strdup_printf("%0.f°C<span color=\"#bd111f\"> </span>", temperature.temperature) as <string>;
      use-markup: true;
    }

    [end]
    BarBar.Label {
      sensor: network;
      templ: "{{BarBarNetwork.interface}}: {{BarBarNetwork.down_speed}}b ⬇️ | {{BarBarNetwork.up_speed}}b ⬆️ ";
    }

    [end]
    BarBar.Label {
      sensor: mem;
      templ: "{{if (BarBarMem.percent) > 0.8}} <span color=\"#bd111f\">{{i32(BarBarMem.percent * 100)}}%<span> {{else if (BarBarMem.percent) > 0.5}}<span color=\"#fcba03\">{{i32(BarBarMem.percent * 100)}}%</span>{{else}}<span color=\"#419e16\">{{i32(BarBarMem.percent * 100)}}%</span>{{end}} ";
      use-markup: true;
    }

    [end]
    BarBar.Label {
      sensor: cpu;
      templ: "{{if (BarBarCpu.percent) > 0.8}} <span color=\"#bd111f\">{{i32(BarBarCpu.percent * 100)}}%<span> {{else if (BarBarCpu.percent) > 0.5}}<span color=\"#fcba03\">{{i32(BarBarCpu.percent * 100)}}%</span>{{else}}<span color=\"#419e16\">{{i32(BarBarCpu.percent * 100)}}%</span>{{end}} ";
      use-markup: true;
    }

    //[end]
    // BarBar.Label {
    //  sensor: bind mpris.current-player;
    //  templ: "{{Playerctl.name}} {{if Playerctl.playing}}▶{{else if Playerctl.paused}}⏸{{else}}⏹{{end}} {{Playerctl.artist}} - {{Playerctl.title}}";
    //  use-markup: true;
    //}

    [end]
    BarBar.Label {
      sensor: battery;
      templ: "{{i32(BarBarBattery.percent * 100)}}%🔋";
    }

    [end] 
    BarBar.ValueIcon {
    }

    //[end]
    //Gtk.Label {
      //label: bind $barbar_strdup_printf("%0.f% ", mem.percent) as <string>;
    //}

    //[end]
    //Gtk.Label {
    //  label: bind $barbar_strdup_printf("%0.f% ", cpu.percent) as <string>;
    //}

    //[end]
    //Gtk.Label {
    //  label: bind $barbar_strdup_printf("%0.f% 🔋", battery.percent) as <string>;
    //}

    [end]
    BarBar.Label network_label {
      sensor: network;
      templ: "{{BarBarNetwork.interface}}: {{BarBarNetwork.down_speed}}b ⬇️ | {{BarBarNetwork.up_speed}}b ⬆️ ";
    }


    [end]
    Gtk.ScaleButton volume {
      adjustment: Adjustment {
        lower: 0.0;
        upper: 1.0;
        page-increment: 0.1;
        step-increment: 0.1;
        value: bind plumb.percent bidirectional;
      };
    }


    // [end]
    // Gtk.Label {
    //   label: bind key.num-lock;
    // }

    // We are not limited to labels, we can do more fancy stuff too.
    // [end]
    // Gtk.LevelBar {
    //   value: bind mem.percent;
    //   orientation: vertical;
    //   inverted: true;
    // }

    // [end]
    // Gtk.LevelBar {
    //   value: bind cpu.percent;
    //   orientation: vertical;
    //   inverted: true;
    // }

    // But what if we want if we want to do something with the value before we print it to the label?
    // We use an experession for this! Here we use the printf function.
    // If you need more powerful things, you can define your own functions in a programming language.
    // See manual for this

    // But wait there is more! We have a custom label widget. It's a bit different.
    // The difference is that it takes a signal from a sensor and then uses a template
    // to display it. It uses template-glib and have access to all properties and can 
    // loops, if's and much more.
    // [end]
    // BarBar.Label network_label {
    //   sensor: network;
    //   templ: "{{BarBarNetwork.interface}}: {{BarBarNetwork.down_speed}}b ⬇️ | {{BarBarNetwork.up_speed}}b ⬆️ ";
    // }

    // [end]
    // BarBar.Label temp {
    //   sensor: temperature;
    //   // Here we don't care about floats, so we cast it to a i32.
    //   templ: "{{i32(BarBarTemperature.temperature)}} ";
    // }

    // [end]
    // Gtk.LevelBar {
    //   value: bind battery.percent;
    //   orientation: vertical;
    //   inverted: true;
    // }

    // [end]
    // BarBar.SensorWidget {
    //    sensor: BarBar.Inhibitor inhibit {
    //    };
    //    child: Gtk.ToggleButton {
    //       label: "inhibitor";
    //       active: bind inhibit.enabled bidirectional;
    //    };
    // }

    // [end]
    // Gtk.ToggleButton btn {
    //   [child]
    //   Gtk.Label {
    //     label: "bajs";
    //   }
    // }

    // [end]
    // Gtk.ScaleButton backbutton {
    //   adjustment: Adjustment {
    //     lower: 0.0;
    //     upper: 1.0;
    //     page-increment: 0.1;
    //     step-increment: 0.1;
    //     value: bind backlight.percent bidirectional;
    //   };
    // }

    // [end]
    // BarBar.Graph {
    //   value: bind cpu.percent;
    // }
    // [end]
    // BarBar.Rotary {
    //   value: bind cpu.percent;
    // }

    // [end]
    // Gtk.Label {
    //   label: bind pomodoro.current;
    // }

  }
}

// But wait what is this?!
// Well, barbar is a really bad name.
// We can do even more! Lets draw some widgets on
// the background!
// BarBar.Background background {
//   top-margin: 50;
//   bottom-margin: 50;
//   right-margin: 200;
//   left-margin: 200;

  // Gtk.LevelBar {
  //   orientation: vertical;
  //   value: bind cpu.percent;
  // }
  // BarBar.Rotary {
  //   value: bind cpu.percent;
  // }
//   BarBar.Graph {
//     value: bind cpu.percent;
//   }
// }

// Here we define some sensors.
BarBar.Clock clock {
  interval: 1000;
  format: "%H:%M:%S";
  // tick => $label_update(clock_label);
}


BarBar.Mem mem {
}

BarBar.Cpu cpu {
  interval: 10000;
}

BarBar.Network network {
  interface: "wlan0";
}

BarBar.Mpris mpris {
}

BarBar.Backlight backlight {
}

BarBar.Battery battery {
}

BarBar.Wireplumber plumb {
}

BarBar.Keyboard key {
}

BarBar.Temperature temperature {
}

BarBar.Pomodoro pomodoro {
  length: 10;
  running: true;
}

BarBar.PowerProfile profile {
}

BarBar.SystemdUnits units {
  bus-type: session;
}

BarBar.Weather weater {
}
